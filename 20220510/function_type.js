
// 선언 (declaration)
function typeA (){
  
}
// 전역 스코프 (global / 언제든 사용가능)
typeA();
// 기명(이름이 있는) 선언방식

// ----------------------------------------------------------------

// 익명함수 (anonymous function) / 함수 리터널(literal): 직겁 새긴다.
// 함수 표현식 (function eapression)
const typeB = function(){
  // 익명 함수에 typeB라는 스티커를 붙인것

}
// 제작자는 알지만 외부사람은 모르는 방식 : 권장되는 방식
typeB();

// ----------------------------------------------------------------

// arrow function (화살표 함수)
// 함수표현식과 같은 기능 
// 축약형(개발자들이 귀찮다고)
// 특정 작동때문에 만들어진 최신문법 / 특정작동 : ex)this

const typeC = () => {}
const typeE = a => {} // 매개변수가 하나일때는 소괄호를 안써도 된다.
// 안 보여서 a에 소괄호를 넣는다. function type = (a) => {}
const typeD = function(){}
// () 다음에 => (화살표)가 나옴 ((함수))
// 비교연산자는 꺽쇠가 먼저 나온다 >=

// ----------------------------------------------------------------

(function(){})();
// 선언이고 호출이고 모르겠고 즉시 실행하겠다.
// 즉시 실행함수
// 문서 시작할때 왕왕 사용한다. 

// ----------------------------------------------------------------

let Test
Test.addEventListner("type", function(){});
// 함수의 매개 변수 자리에 함수가 들어가 있는 것 "콜백함수"
// 콜백함수는 익명이 기본이다. 
// 매우 많이 사용하기 때문에 눈에 익혀야된다.

Test.addEventListner("test", testfunction);
// function()<-- 소괄호를 사용하지 않는다 라는 특징이 있다.
function testfunction(){
  // 밖으로 빼낸 콜백함수
  // 기명으로 함수를 만들어줌
}